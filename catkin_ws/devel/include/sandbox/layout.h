// Generated by gencpp from file sandbox/layout.msg
// DO NOT EDIT!


#ifndef SANDBOX_MESSAGE_LAYOUT_H
#define SANDBOX_MESSAGE_LAYOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sandbox/dimension.h>

namespace sandbox
{
template <class ContainerAllocator>
struct layout_
{
  typedef layout_<ContainerAllocator> Type;

  layout_()
    : dim()
    , clock()  {
    }
  layout_(const ContainerAllocator& _alloc)
    : dim(_alloc)
    , clock(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::sandbox::dimension_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sandbox::dimension_<ContainerAllocator> >::other >  _dim_type;
  _dim_type dim;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _clock_type;
  _clock_type clock;





  typedef boost::shared_ptr< ::sandbox::layout_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandbox::layout_<ContainerAllocator> const> ConstPtr;

}; // struct layout_

typedef ::sandbox::layout_<std::allocator<void> > layout;

typedef boost::shared_ptr< ::sandbox::layout > layoutPtr;
typedef boost::shared_ptr< ::sandbox::layout const> layoutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandbox::layout_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandbox::layout_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandbox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sandbox': ['/home/tomvillegasm/duckietown-uoct/catkin_ws/src/sandbox/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandbox::layout_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandbox::layout_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandbox::layout_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandbox::layout_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandbox::layout_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandbox::layout_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandbox::layout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6424ad02d7a0d576d10eac3878f9649";
  }

  static const char* value(const ::sandbox::layout_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6424ad02d7a0d57ULL;
  static const uint64_t static_value2 = 0x6d10eac3878f9649ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandbox::layout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandbox/layout";
  }

  static const char* value(const ::sandbox::layout_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandbox::layout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandbox/dimension[] dim\n"
"int16[] clock\n"
"\n"
"================================================================================\n"
"MSG: sandbox/dimension\n"
"string label # Name or id of stoplight station (Arduino)\n"
"int16[] street # Colors of RGB\n"
"int16[] cross # Colors of RGB\n"
;
  }

  static const char* value(const ::sandbox::layout_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandbox::layout_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dim);
      stream.next(m.clock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct layout_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandbox::layout_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandbox::layout_<ContainerAllocator>& v)
  {
    s << indent << "dim[]" << std::endl;
    for (size_t i = 0; i < v.dim.size(); ++i)
    {
      s << indent << "  dim[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sandbox::dimension_<ContainerAllocator> >::stream(s, indent + "    ", v.dim[i]);
    }
    s << indent << "clock[]" << std::endl;
    for (size_t i = 0; i < v.clock.size(); ++i)
    {
      s << indent << "  clock[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.clock[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDBOX_MESSAGE_LAYOUT_H
