# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sandbox/MultiArrayLayout.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sandbox.msg

class MultiArrayLayout(genpy.Message):
  _md5sum = "c71496406d4b1a871cb3ce7d7daa62da"
  _type = "sandbox/MultiArrayLayout"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sandbox/MultiArraySubDimension[] stoplights # colection of stoplights to send message
int16 deface

================================================================================
MSG: sandbox/MultiArraySubDimension
string label # cross, street, blink warning
int16[] colors # [red,gree,blue,custom]
"""
  __slots__ = ['stoplights','deface']
  _slot_types = ['sandbox/MultiArraySubDimension[]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stoplights,deface

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiArrayLayout, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stoplights is None:
        self.stoplights = []
      if self.deface is None:
        self.deface = 0
    else:
      self.stoplights = []
      self.deface = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.stoplights)
      buff.write(_struct_I.pack(length))
      for val1 in self.stoplights:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(struct.pack(pattern, *val1.colors))
      buff.write(_get_struct_h().pack(self.deface))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stoplights is None:
        self.stoplights = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stoplights = []
      for i in range(0, length):
        val1 = sandbox.msg.MultiArraySubDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        end += struct.calcsize(pattern)
        val1.colors = struct.unpack(pattern, str[start:end])
        self.stoplights.append(val1)
      start = end
      end += 2
      (self.deface,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.stoplights)
      buff.write(_struct_I.pack(length))
      for val1 in self.stoplights:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(val1.colors.tostring())
      buff.write(_get_struct_h().pack(self.deface))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stoplights is None:
        self.stoplights = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stoplights = []
      for i in range(0, length):
        val1 = sandbox.msg.MultiArraySubDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        end += struct.calcsize(pattern)
        val1.colors = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
        self.stoplights.append(val1)
      start = end
      end += 2
      (self.deface,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
