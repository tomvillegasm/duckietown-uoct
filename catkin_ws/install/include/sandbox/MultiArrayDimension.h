// Generated by gencpp from file sandbox/MultiArrayDimension.msg
// DO NOT EDIT!


#ifndef SANDBOX_MESSAGE_MULTIARRAYDIMENSION_H
#define SANDBOX_MESSAGE_MULTIARRAYDIMENSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sandbox
{
template <class ContainerAllocator>
struct MultiArrayDimension_
{
  typedef MultiArrayDimension_<ContainerAllocator> Type;

  MultiArrayDimension_()
    : type()
    , direction()
    , colors()  {
    }
  MultiArrayDimension_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , direction(_alloc)
    , colors(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _colors_type;
  _colors_type colors;





  typedef boost::shared_ptr< ::sandbox::MultiArrayDimension_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandbox::MultiArrayDimension_<ContainerAllocator> const> ConstPtr;

}; // struct MultiArrayDimension_

typedef ::sandbox::MultiArrayDimension_<std::allocator<void> > MultiArrayDimension;

typedef boost::shared_ptr< ::sandbox::MultiArrayDimension > MultiArrayDimensionPtr;
typedef boost::shared_ptr< ::sandbox::MultiArrayDimension const> MultiArrayDimensionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandbox::MultiArrayDimension_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandbox::MultiArrayDimension_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandbox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sandbox': ['/home/tomvillegasm/duckietown-uoct/catkin_ws/src/sandbox/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandbox::MultiArrayDimension_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandbox::MultiArrayDimension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandbox::MultiArrayDimension_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c859bfffbf71660d86da49dca5a1f3c1";
  }

  static const char* value(const ::sandbox::MultiArrayDimension_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc859bfffbf71660dULL;
  static const uint64_t static_value2 = 0x86da49dca5a1f3c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandbox/MultiArrayDimension";
  }

  static const char* value(const ::sandbox::MultiArrayDimension_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type # cross, street, blink warning\n"
"string direction # norht2south, east2west, up2down\n"
"int16[] colors # [red,gree,blue,custom]\n"
;
  }

  static const char* value(const ::sandbox::MultiArrayDimension_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.direction);
      stream.next(m.colors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiArrayDimension_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandbox::MultiArrayDimension_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandbox::MultiArrayDimension_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.colors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDBOX_MESSAGE_MULTIARRAYDIMENSION_H
